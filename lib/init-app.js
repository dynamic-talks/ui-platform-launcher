import path from 'path';
import createError  from 'http-errors';
import express from 'express';
const { createServerIocContainer } = require('ui-platform-core/dist/lib/ui-application/server.ioc-container');
import { uiRouterFactory } from './router/ui-router.factory';



/**
 * Initialize express app. If `parentApp` is supplied then it just initial and attach app pages from target `rootPath`
 *
 * @param {String} rootPath - absolute path to root directory of target app
 * @param {String} configPath - relative path to concrete configuration file
 * @param {express} [parentApp] - Express server instance,
 * @param {String} [appVersion] - App build version, format: "<Number>.<Number>.<Number>-<git-rev hash>"
 * @param {Object} [assetsManifestPath] - Asset manifest generated by Webpack ManifestPlugin
 * @returns {*|Function}
 */
export default function({
  rootPath,
  configPath,
  parentApp,
  appVersion = '0.0.0',
  assetsManifestPath = {},
}) {
  const app = parentApp || express();
  const baseConfigPath = path.join(rootPath, 'config', 'base.yaml');

  if (! configPath) {
    console.warn('`configPath` argument with configuration filename is not passed, so default config is going to be used');

    configPath = baseConfigPath;
  }


  // initialize root IoC container
  const iocContainer = createServerIocContainer({
    baseConfigPath: baseConfigPath,
    configPath: configPath,
    assetsManifestPath
  });

  if (! parentApp) {
    // initial base middleware
    app.use(express.json());
    app.use(express.urlencoded({extended: false}));
    app.use(express.static(path.join(rootPath, 'public')));
  }

  app.use('/', uiRouterFactory({
    rootDir: rootPath,
    iocContainer,
  }));

  if (! parentApp) {
    // catch 404 and forward to error handler
    app.use(function (req, res, next) {
      next(createError(404));
    });

    // error handler
    app.use(function (err, req, res, next) {
      // set locals, only providing error in development
      res.locals.message = err.message;
      res.locals.error = req.app.get('env') === 'development' ? err : {};

      // render the error page
      res.status(err.status || 500);
      res.json(err);
      console.error(err);
    });
  }

  return app;
}
